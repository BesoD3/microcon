
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  0000015c  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ca  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b4  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e6  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000075  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  8e:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_init>:
void UART_write(unsigned char);				//función para la transmisión de caracteres
void UART_msg(char*);						//función para la transmisión de cadenas de caracteres

void UART_init()
{
	DDRD |= (1<<1);							//PD1	COMO SALIDA TXa
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<0);						//PD0	COMO ENTRADA RX
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = (0<<TXC0)|(0<<U2X0)|(0<<MPCM0);
  a2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<TXB80);
  a6:	88 e9       	ldi	r24, 0x98	; 152
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0);
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103;								//NO DUPLICA VELOCIDAD 9600B A 160000
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  be:	08 95       	ret

000000c0 <UART_read>:
}

unsigned char UART_read(){
	if(UCSR0A&(1<<7)){			//si el bit7 del registro UCSR0A se ha puesto a 1
  c0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c4:	88 23       	and	r24, r24
  c6:	1c f4       	brge	.+6      	; 0xce <UART_read+0xe>
		return UDR0;			//devuelve el dato almacenado en el registro UDR0
  c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	08 95       	ret
	}
	else
	return 0;
  ce:	80 e0       	ldi	r24, 0x00	; 0
}
  d0:	08 95       	ret

000000d2 <UART_write>:

void UART_write(unsigned char caracter){
	while(!(UCSR0A&(1<<5)));    // mientras el registro UDR0 esté lleno espera
  d2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d6:	95 ff       	sbrs	r25, 5
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <UART_write>
	UDR0 = caracter;            //cuando el el registro UDR0 está vacio se envia el caracter
  da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  de:	08 95       	ret

000000e0 <UART_write_txt>:
}

void UART_write_txt(char* cadena){			//cadena de caracteres de tipo char
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ec 01       	movw	r28, r24
	while(*cadena !=0x00){				//mientras el último valor de la cadena sea diferente a el caracter nulo
  e6:	03 c0       	rjmp	.+6      	; 0xee <UART_write_txt+0xe>
		UART_write(*cadena);			//transmite los caracteres de cadena
  e8:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_write>
		cadena++;						//incrementa la ubicación de los caracteres en cadena
  ec:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSR0A&(1<<5)));    // mientras el registro UDR0 esté lleno espera
	UDR0 = caracter;            //cuando el el registro UDR0 está vacio se envia el caracter
}

void UART_write_txt(char* cadena){			//cadena de caracteres de tipo char
	while(*cadena !=0x00){				//mientras el último valor de la cadena sea diferente a el caracter nulo
  ee:	88 81       	ld	r24, Y
  f0:	81 11       	cpse	r24, r1
  f2:	fa cf       	rjmp	.-12     	; 0xe8 <UART_write_txt+0x8>
		UART_write(*cadena);			//transmite los caracteres de cadena
		cadena++;						//incrementa la ubicación de los caracteres en cadena
										//para enviar el siguiente caracter de cadena
	}
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <main>:
#include <avr/io.h>
#include <UART.h>

int main(void)
{
   DDRC |= (1<<0)|(1<<1);
  fa:	87 b1       	in	r24, 0x07	; 7
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	87 b9       	out	0x07, r24	; 7
   
   UART_init();
 100:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>
   UART_write_txt("valor de potenciometro 1 o 2\n\r");
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_write_txt>
   UART_write_txt("digite 1 o 2\n\r");
 10c:	8f e1       	ldi	r24, 0x1F	; 31
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_write_txt>
   
   uint8_t num=0;
    while (1) 
    {
		num= UART_read();
 114:	0e 94 60 00 	call	0xc0	; 0xc0 <UART_read>
 118:	c8 2f       	mov	r28, r24
		 UART_read(DDRC);
 11a:	87 b1       	in	r24, 0x07	; 7
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 60 00 	call	0xc0	; 0xc0 <UART_read>
		
		if (num !=0){
 122:	cc 23       	and	r28, r28
 124:	b9 f3       	breq	.-18     	; 0x114 <main+0x1a>
			
			switch(num){
 126:	c1 33       	cpi	r28, 0x31	; 49
 128:	19 f0       	breq	.+6      	; 0x130 <main+0x36>
 12a:	c2 33       	cpi	r28, 0x32	; 50
 12c:	59 f0       	breq	.+22     	; 0x144 <main+0x4a>
 12e:	f2 cf       	rjmp	.-28     	; 0x114 <main+0x1a>
				case '1':
				PORTC= (1<<0);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	88 b9       	out	0x08, r24	; 8
				UART_write_txt("valor del potenciometro 1:\n\r");
 134:	8e e2       	ldi	r24, 0x2E	; 46
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_write_txt>
				UART_write(DDRC);
 13c:	87 b1       	in	r24, 0x07	; 7
 13e:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_write>
				break;
 142:	e8 cf       	rjmp	.-48     	; 0x114 <main+0x1a>
				
				case '2':
				PORTC= (1<<1);
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	88 b9       	out	0x08, r24	; 8
				UART_write_txt("valor del potenciometro 2:\n\r");
 148:	8b e4       	ldi	r24, 0x4B	; 75
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_write_txt>
				UART_write(DDRC);
 150:	87 b1       	in	r24, 0x07	; 7
 152:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_write>
				break;
 156:	de cf       	rjmp	.-68     	; 0x114 <main+0x1a>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
